Grade: 33.00/50.00

6 Deduction(s):

--------------
#1: 5.00 points
Failing test: test_bfs_3: 
        @points=5
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 104, in test_bfs_3
    [('B', ['D']), ('C', ['A']), ('D', ['A']), ('E', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])])
AssertionError: Lists differ: [('B'[41 chars]', ['B', 'G', 'G']), ('F', ['E', 'E', 'E']), ('G', ['C', 'D'])] != [('B'[41 chars]', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])]

First differing element 3:
('E', ['B', 'G', 'G'])
('E', ['B', 'G'])

  [('B', ['D']),
   ('C', ['A']),
   ('D', ['A']),
-  ('E', ['B', 'G', 'G']),
?             -----

+  ('E', ['B', 'G']),
-  ('F', ['E', 'E', 'E']),
+  ('F', ['E']),
   ('G', ['C', 'D'])]

source:
    def test_bfs_3(self):
         """
         @points=5
         """
         graph = example_graph2()
         node2distances, node2num_paths, node2parents = bfs(graph, 'A', max_depth=10)
         self.assertListEqual(sorted(node2distances.items()),
                              [('A', 0), ('B', 2), ('C', 1), ('D', 1), ('E', 3), ('F', 4), ('G', 2)])
         self.assertListEqual(sorted(node2num_paths.items()),
                              [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)])
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res,
                              [('B', ['D']), ('C', ['A']), ('D', ['A']), ('E', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])])
         b = bottom_up(graph, node2distances, node2num_paths, node2parents)
         self.assertEqual(1.0, round(b[('E', 'F')], 2))
         self.assertEqual(3.83, round(b[('A', 'D')], 2))
         self.assertEqual(1.67, round(b[('B', 'D')], 2))
         self.assertEqual(1.17, round(b[('D', 'G')], 2))
         self.assertEqual(2.17, round(b[('A', 'C')], 2))
         self.assertEqual(0.67, round(b[('B', 'E')], 2))
         self.assertEqual(1.33, round(b[('E', 'G')], 2))
         self.assertEqual(1.17, round(b[('C', 'G')], 2))
--------------

--------------
#2: 1.00 points
Failing test: test_complexity_3: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 143, in test_complexity_3
    self.assertTrue(round(y / x, 0) != 9, 'not multiplicative')
AssertionError: False is not true : not multiplicative

source:
    def test_complexity_3(self):
         """
         @points=1
         """
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(6000, 1500, 10)
         self.assertTrue(round(y / x, 0) != 9, 'not multiplicative')
--------------

--------------
#3: 1.00 points
Failing test: test_complexity_4: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 154, in test_complexity_4
    self.assertEqual(round(y - x, 0), 4000, 'additive')
AssertionError: 2000000 != 4000 : additive

source:
    def test_complexity_4(self):
         """
         @points=1
         """
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(6000, 500, 10)
         self.assertEqual(round(y - x, 0), 4000, 'additive')
         x = complexity_of_bfs(2000, 500, 10)
         y = complexity_of_bfs(2000, 1500, 10)
         self.assertEqual(round(y - x, 0), 1000, 'additive')
--------------

--------------
#4: 3.00 points
Failing test: test_jaccard: 
        @points=3
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 234, in test_jaccard
    self.assertEqual(res, [(('D', 'E'), 0.5), (('D', 'A'), 0.0)])
AssertionError: Lists differ: [(('D', 'E'), 0.5), (('D', 'B'), 0.0)] != [(('D', 'E'), 0.5), (('D', 'A'), 0.0)]

First differing element 1:
(('D', 'B'), 0.0)
(('D', 'A'), 0.0)

- [(('D', 'E'), 0.5), (('D', 'B'), 0.0)]
?                             ^

+ [(('D', 'E'), 0.5), (('D', 'A'), 0.0)]
?                             ^


source:
    def test_jaccard(self):
         """
         @points=3
         """
         g = example_graph()
         train_graph = make_training_graph(g, 'D', 2)
         res = jaccard(train_graph, 'D', 2)
         self.assertEqual(res, [(('D', 'E'), 0.5), (('D', 'A'), 0.0)])
--------------

--------------
#5: 3.00 points
Failing test: test_path_score_2: 
        @points=3
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 256, in test_path_score_2
    self.assertListEqual(res, [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25), (('D', 'H'), 0.25)])
AssertionError: Lists differ: [(('D', 'F'), 0.5), (('D', 'H'), 0.25), (('D', 'A'), 0.25), (('D', 'C'), 0.25)] != [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25), (('D', 'H'), 0.25)]

First differing element 1:
(('D', 'H'), 0.25)
(('D', 'A'), 0.25)

- [(('D', 'F'), 0.5), (('D', 'H'), 0.25), (('D', 'A'), 0.25), (('D', 'C'), 0.25)]
?                             ^                   ^                   ^

+ [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25), (('D', 'H'), 0.25)]
?                             ^                   ^                   ^


source:
    def test_path_score_2(self):
         """
         @points=3
         """
         g = example_graph()
         g.add_edge('A', 'H')
         g.add_edge('C', 'H')
         train_graph = g.copy()
         train_graph.remove_edge(*('D', 'F'))
         res = path_score(train_graph, 'D', k=4, beta=.5)
         self.assertListEqual(res, [(('D', 'F'), 0.5), (('D', 'A'), 0.25), (('D', 'C'), 0.25), (('D', 'H'), 0.25)])
--------------

--------------
#6: 4.00 points
Failing test: test_time: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 266, in test_time
    clusters = partition_girvan_newman(self.graph, 3)
Exception: end of time

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 268, in test_time
    self.assertTrue(False, 'should take less than 30 seconds...')
AssertionError: False is not true : should take less than 30 seconds...

source:
    def test_time(self):
         """
         @points=4
         """
         signal.signal(signal.SIGALRM, handler)
         signal.alarm(30)
         start = time.time()
         try:
             clusters = partition_girvan_newman(self.graph, 3)
         except Exception as exc:
             self.assertTrue(False, 'should take less than 30 seconds...')
 
         signal.alarm(0)
         self.assertTrue(clusters is not None, 'nothing returned')
         self.assertTrue(len(clusters) != 0, 'nothing returned')
         end = time.time()
         runtime = end - start
         self.assertTrue(runtime < 30, 'should take less than 30 seconds...')
--------------

